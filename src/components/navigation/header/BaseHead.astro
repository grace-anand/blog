---
import '@styles/global.css';
import { SITE_DESCRIPTION, SITE_TITLE } from '@config/consts';
export interface Props {
	title?: string;
	description?: string;
	image?: string;
}
const { title, description, image = '/placeholder-social.jpg' } = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const appTitle = title || SITE_TITLE;
const appDescription = description || SITE_DESCRIPTION;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{appTitle}</title>
<meta name="title" content={appTitle} />
<meta name="description" content={appDescription} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={appTitle} />
<meta property="og:description" content={appDescription} />
<meta property="og:image" content={new URL(image, import.meta.env.APP_URL)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={appTitle} />
<meta property="twitter:description" content={appDescription} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- This is intentionally inlined to avoid FOUC -->
<script is:inline>
	const root = document.documentElement;
	const theme = (() => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark';
		}
		return 'light';
	})();
	if (theme === 'light') {
		root.classList.remove('dark');
	} else {
		root.classList.add('dark');
	}
</script>